package com.achpay.wallet.model.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.achpay.wallet.model.database.bean.UserAddress;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UserAddress".
*/
public class UserAddressDao extends AbstractDao<UserAddress, Long> {

    public static final String TABLENAME = "UserAddress";

    /**
     * Properties of entity UserAddress.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Localid = new Property(0, Long.class, "localid", true, "localid");
        public final static Property Id = new Property(1, long.class, "id", false, "id");
        public final static Property Address = new Property(2, String.class, "address", false, "address");
        public final static Property Isdefault = new Property(3, int.class, "isdefault", false, "isdefault");
        public final static Property Phone = new Property(4, String.class, "phone", false, "phone");
        public final static Property User_id = new Property(5, int.class, "user_id", false, "user_id");
        public final static Property Username = new Property(6, String.class, "username", false, "username");
    }


    public UserAddressDao(DaoConfig config) {
        super(config);
    }
    
    public UserAddressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UserAddress\" (" + //
                "\"localid\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: localid
                "\"id\" INTEGER NOT NULL UNIQUE ," + // 1: id
                "\"address\" TEXT," + // 2: address
                "\"isdefault\" INTEGER NOT NULL ," + // 3: isdefault
                "\"phone\" TEXT," + // 4: phone
                "\"user_id\" INTEGER NOT NULL ," + // 5: user_id
                "\"username\" TEXT);"); // 6: username
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UserAddress\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserAddress entity) {
        stmt.clearBindings();
 
        Long localid = entity.getLocalid();
        if (localid != null) {
            stmt.bindLong(1, localid);
        }
        stmt.bindLong(2, entity.getId());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
        stmt.bindLong(4, entity.getIsdefault());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
        stmt.bindLong(6, entity.getUser_id());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(7, username);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserAddress entity) {
        stmt.clearBindings();
 
        Long localid = entity.getLocalid();
        if (localid != null) {
            stmt.bindLong(1, localid);
        }
        stmt.bindLong(2, entity.getId());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
        stmt.bindLong(4, entity.getIsdefault());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
        stmt.bindLong(6, entity.getUser_id());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(7, username);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserAddress readEntity(Cursor cursor, int offset) {
        UserAddress entity = new UserAddress( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // localid
            cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.getInt(offset + 3), // isdefault
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone
            cursor.getInt(offset + 5), // user_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // username
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserAddress entity, int offset) {
        entity.setLocalid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getLong(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsdefault(cursor.getInt(offset + 3));
        entity.setPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_id(cursor.getInt(offset + 5));
        entity.setUsername(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserAddress entity, long rowId) {
        entity.setLocalid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserAddress entity) {
        if(entity != null) {
            return entity.getLocalid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserAddress entity) {
        return entity.getLocalid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
